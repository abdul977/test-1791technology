{
  "info": {
    "name": "1791Technology REST API",
    "description": "Professional RESTful API built with Node.js, Express, and TypeScript following industry best practices.\n\n## Features\n- JWT-based authentication and authorization\n- Role-based access control (Admin, Moderator, User)\n- Comprehensive input validation\n- Standardized error handling (RFC 7807)\n- Rate limiting and security middleware\n- MongoDB with Mongoose ODM\n- Full CRUD operations for Users, Products, and Orders\n\n## Usage\n1. Set up environment variables (see Environment section)\n2. Run authentication requests to get tokens\n3. Use tokens in subsequent requests\n\n## Authentication\nThis API uses JWT tokens. After login/register, the access token is automatically set in the environment variable `accessToken` for use in other requests.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "1791tech-api-collection",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set base URL if not already set",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'http://localhost:3000/api/v1');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has correct content type', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Auto-extract tokens from auth responses",
          "if (pm.response.code === 200 || pm.response.code === 201) {",
          "    const responseJson = pm.response.json();",
          "    if (responseJson.success && responseJson.data && responseJson.data.accessToken) {",
          "        pm.environment.set('accessToken', responseJson.data.accessToken);",
          "        pm.environment.set('refreshToken', responseJson.data.refreshToken);",
          "        console.log('Tokens updated in environment');",
          "    }",
          "    if (responseJson.success && responseJson.data && responseJson.data.id) {",
          "        pm.environment.set('lastCreatedId', responseJson.data.id);",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/v1",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response contains user data and tokens', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('user');",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "    pm.expect(responseJson.data.user).to.not.have.property('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"username\": \"{{username}}\",\n  \"password\": \"{{userPassword}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account. Returns user data and JWT tokens."
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Login successful', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.message).to.include('Login successful');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password. Returns JWT tokens."
          }
        },
        {
          "name": "Get Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile retrieved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.data).to.not.have.property('password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile. Requires authentication."
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Update user profile information."
          }
        },
        {
          "name": "Change Password",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"{{userPassword}}\",\n  \"newPassword\": \"NewPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            },
            "description": "Change user password."
          }
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh access token using refresh token."
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout user (client-side token invalidation)."
          }
        }
      ],
      "description": "Authentication endpoints for user registration, login, profile management, and token operations."
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "Get All Users (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=10&sort=createdAt&order=desc",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "sort",
                  "value": "createdAt"
                },
                {
                  "key": "order",
                  "value": "desc"
                }
              ]
            },
            "description": "Get all users with pagination and filtering. Admin only."
          }
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{lastCreatedId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{lastCreatedId}}"]
            },
            "description": "Get user by ID. Users can only access their own profile."
          }
        },
        {
          "name": "Create User (Admin)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@example.com\",\n  \"username\": \"newuser\",\n  \"password\": \"Password123\",\n  \"firstName\": \"New\",\n  \"lastName\": \"User\",\n  \"role\": \"user\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            },
            "description": "Create a new user. Admin only."
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"User\",\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{lastCreatedId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{lastCreatedId}}"]
            },
            "description": "Update user information."
          }
        },
        {
          "name": "Deactivate User (Admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{lastCreatedId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{lastCreatedId}}"]
            },
            "description": "Deactivate user account. Admin only."
          }
        },
        {
          "name": "Get User Statistics (Admin)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/stats",
              "host": ["{{baseUrl}}"],
              "path": ["users", "stats"]
            },
            "description": "Get user statistics. Admin only."
          }
        }
      ],
      "description": "User management endpoints for CRUD operations and statistics."
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get All Products",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products?page=1&limit=10&category=Electronics&inStock=true",
              "host": ["{{baseUrl}}"],
              "path": ["products"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "category",
                  "value": "Electronics"
                },
                {
                  "key": "inStock",
                  "value": "true"
                }
              ]
            },
            "description": "Get all products with filtering and pagination. Public endpoint."
          }
        },
        {
          "name": "Search Products",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/search?q=laptop&page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["products", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "laptop"
                },
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Search products by text query."
          }
        },
        {
          "name": "Get Product Categories",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/categories",
              "host": ["{{baseUrl}}"],
              "path": ["products", "categories"]
            },
            "description": "Get all product categories."
          }
        },
        {
          "name": "Get Product by ID",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Get product by ID. Public endpoint."
          }
        },
        {
          "name": "Create Product (Admin/Moderator)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data && responseJson.data.id) {",
                  "        pm.environment.set('productId', responseJson.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{productName}}\",\n  \"description\": \"{{productDescription}}\",\n  \"price\": {{productPrice}},\n  \"category\": \"{{productCategory}}\",\n  \"stock\": {{productStock}},\n  \"sku\": \"{{productSku}}\",\n  \"images\": [\"https://example.com/image1.jpg\"],\n  \"tags\": [\"electronics\", \"laptop\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products",
              "host": ["{{baseUrl}}"],
              "path": ["products"]
            },
            "description": "Create a new product. Admin or Moderator only."
          }
        },
        {
          "name": "Update Product (Admin/Moderator)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Product Name\",\n  \"price\": 199.99,\n  \"stock\": 75,\n  \"isActive\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Update product information. Admin or Moderator only."
          }
        },
        {
          "name": "Delete Product (Admin)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/{{productId}}",
              "host": ["{{baseUrl}}"],
              "path": ["products", "{{productId}}"]
            },
            "description": "Deactivate product. Admin only."
          }
        },
        {
          "name": "Get Product Statistics (Admin/Moderator)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/products/stats",
              "host": ["{{baseUrl}}"],
              "path": ["products", "stats"]
            },
            "description": "Get product statistics. Admin or Moderator only."
          }
        }
      ],
      "description": "Product management endpoints for catalog operations."
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Get All Orders",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders?page=1&limit=10&status=pending",
              "host": ["{{baseUrl}}"],
              "path": ["orders"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                },
                {
                  "key": "status",
                  "value": "pending"
                }
              ]
            },
            "description": "Get orders. Users see only their orders, admins see all."
          }
        },
        {
          "name": "Get Order by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}"]
            },
            "description": "Get order by ID."
          }
        },
        {
          "name": "Create Order",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.success && responseJson.data && responseJson.data.id) {",
                  "        pm.environment.set('orderId', responseJson.data.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"items\": [\n    {\n      \"productId\": \"{{productId}}\",\n      \"quantity\": 2,\n      \"price\": 99.99\n    }\n  ],\n  \"shippingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"12345\",\n    \"country\": \"USA\"\n  },\n  \"billingAddress\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"Anytown\",\n    \"state\": \"CA\",\n    \"zipCode\": \"12345\",\n    \"country\": \"USA\"\n  },\n  \"paymentMethod\": \"Credit Card\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders",
              "host": ["{{baseUrl}}"],
              "path": ["orders"]
            },
            "description": "Create a new order."
          }
        },
        {
          "name": "Update Order Status (Admin/Moderator)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "status"]
            },
            "description": "Update order status. Admin or Moderator only."
          }
        },
        {
          "name": "Cancel Order",
          "request": {
            "method": "PUT",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/{{orderId}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "{{orderId}}", "cancel"]
            },
            "description": "Cancel order. Users can cancel their own orders."
          }
        },
        {
          "name": "Get Order Statistics (Admin/Moderator)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/orders/stats",
              "host": ["{{baseUrl}}"],
              "path": ["orders", "stats"]
            },
            "description": "Get order statistics. Admin or Moderator only."
          }
        }
      ],
      "description": "Order management endpoints for e-commerce operations."
    },
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/../health",
              "host": ["{{baseUrl}}"],
              "path": ["..", "health"]
            },
            "description": "Check API health status."
          }
        }
      ],
      "description": "Health check endpoint for monitoring."
    }
  ]
}
